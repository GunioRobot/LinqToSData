<?xml version="1.0"?>
<codeTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="AAB54F5E-E03F-4eaf-8253-B05BDC80EF45" name="Default-SDataClientEntity-SalesLogix" entityType="Entity" templateType="SDataClientEntity" templateEngineType="T4">
  <template>
  <![CDATA[<#@ template language="C#v3.5" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="Microsoft.Unity.dll" #>
<#@ assembly name="Sage.Platform.dll" #>
<#@ assembly name="Sage.Platform.Orm.CodeGen.dll" #>
<#@ assembly name="Sage.Platform.Projects.dll" #>
<#@ assembly name="CustomBuild.AdminModule.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Practices.Unity" #>
<#@ import namespace="Sage.Platform.Orm.CodeGen" #>
<#@ import namespace="Sage.Platform.Orm.Entities" #>
<#@ import namespace="Sage.Platform.Security" #>
<#@ import namespace="CustomBuild.AdminModule" #>

<#
var tools = (Tools) Context["tools"];
var entity = (OrmEntity) Context["entity"];
var @namespace = (string) Context["namespace"];
var generator = (SDataClientEntityCodeGenerator) Context["generator"];
#>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// disable XML documentation warnings and _Id never being assigned to
#pragma warning disable 1591, 649

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reflection;
using Sage.Integration.Messaging.Model;
using Sage.Entity.Interfaces;
using Sage.Platform;
using Sage.Platform.Collections;
using Sage.Platform.ComponentModel;
using Sage.Platform.DynamicMethod;
using Sage.Platform.Framework;
using Sage.Platform.Metadata;
using Sage.Platform.NHibernateRepository;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Attributes;
using Sage.Platform.Orm.Interfaces;
using Sage.Platform.Security;

namespace Sage.SalesLogix.SData.Entities
{
    [RequestPath("<#= entity.SDataPathName #>")]
    public class <#= entity.Name #> : <#= entity.InterfaceName #>
    {
    <# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
      private <#= generator.ToClrType(prop) #> _<#= prop.PropertyName #>;
<# } #>

<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
        private <#= relation.ParentEntity.InterfaceName #> _<#= relation.ChildProperty.PropertyName #>;
<#  } #>
<# } #>

<# if (entity.ChildEntities.Count > 0) { #>
        #region 1:M and M:1 fields

<#  foreach (var relation in entity.ChildEntities) { #>
<#   if (relation.ParentProperty.Include && relation.Cardinality == "1:M") { #>
        private EntitySet<<#= relation.ChildEntity.InterfaceName #>> _<#= relation.ParentProperty.PropertyName #>;
<#   } else if (relation.ParentProperty.Include && relation.Cardinality == "M:1") { #>
        private <#= relation.ChildEntity.InterfaceName #> _<#= relation.ParentProperty.PropertyName #>;
<#   } #>
<#  } #>

        #endregion 1:M and M:1 fields
<# } #>


<# foreach (var prop in generator.GetIncludedProperties(entity)) { #>
        public virtual <#= generator.ToClrType(prop) #> <#= prop.PropertyName #>
        {
            get
            {
                return _<#= prop.PropertyName #>;
            }
            <#   if (!(prop is OrmFieldProperty && ((OrmFieldProperty) prop).IsReadOnly)) { #>
            set
            {
                _<#= prop.PropertyName #> = value;
            }
            <#    } #>
        }
<# } #>

<#  foreach (var relation in entity.ChildEntities) { #>
<#   if (relation.ParentProperty.Include) { #>
<#    if (relation.Cardinality == "1:M") { #>
        public ICollection<<#= relation.ChildEntity.InterfaceName #>> <#= relation.ParentProperty.PropertyName #> { get; set; }
<#    } else if (relation.Cardinality == "M:1") { #>
<#     if (relation.ParentProperty.IsNullable) { #>
<#     } #>
        public <#= relation.ChildEntity.InterfaceName #> <#= relation.ParentProperty.PropertyName #> { get; set; }
<#    } #>
<#   } #>
<#  } #>

        #region M:1 Relationships
<# foreach (var relation in entity.ParentEntities) { #>
<#  if (relation.ChildProperty.Include) { #>
        public <#= relation.ParentEntity.InterfaceName #> <#= relation.ChildProperty.PropertyName #> { get; set; }

<#  } #>
<# } #>
        #endregion M:1 Relationships


<# if (entity.IsExtension) { #>
        #region 1:1 Parent Entity Extension

        public <#= entity.ExtendedEntity.InterfaceName #> <#= entity.ExtendedEntity.Name #> { get; set ; }

        #endregion 1:1 Parent Entity Extension
<# } #>

<# if (entity.ExtensionEntities.Count > 0) { #>
        #region Child extensions
<#  foreach (var child in entity.ExtensionEntities) { #>
        public <#= child.InterfaceName #> <#= child.Name #> { get; set; }
<#  } #>
        #endregion Child extensions
<# } #>

<# var methods = entity.Methods; #>
<# if (methods.Count > 0) { #>
        #region Business Rule Methods
<#  foreach (var method in methods) { #>
        public <#= method.ReturnType #> <#= method.MethodName #>(<#= tools.FormatParamDeclarationList(method) #>)
        {
          throw new NotImplementedException();
        }
<#  } #>
        #endregion Business Rule Methods
<# } #>

    public event EventHandler<EventArgs> Persisted;
    
    public void Delete()
    {
          throw new NotImplementedException();
    }
    
    public void Save()
    {
          throw new NotImplementedException();
    }

    public PersistentState PersistentState { get { throw new NotImplementedException(); } }

    public object Id { get { return null; } }

    public object this[string propertyName] 
    { 
      get { return null;}
      set { }
    }
    
            #region Custom Properties
<# foreach (var prop in generator.GetIncludedCustomProperties(entity)) { #>
    public virtual <#= prop.ReturnType #> <#= prop.PropertyName #>
    { 
      get { throw new NotImplementedException(); }
    }
<# } #>
        #endregion Custom Properties

    public bool Creating { get { throw new NotImplementedException(); } }
    
    public Guid InstanceId { get { throw new NotImplementedException(); } }
    
    }
}
<#+
[Dependency]
public IDictionary Context { get; set; }
#>]]></template>
  <description>Default SalesLogix SData Client Entity Template</description>
</codeTemplate>